// <auto-generated />
using System;
using Genealogy.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Genealogy.Infrastructure.Migrations
{
    [DbContext(typeof(GenealogyDbContext))]
    [Migration("20231103231808_EventSources_ManyToMany")]
    partial class EventSources_ManyToMany
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.13");

            modelBuilder.Entity("Genealogy.Domain.Data.Entities.EventEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("Date")
                        .HasColumnType("TEXT")
                        .HasColumnName("date");

                    b.Property<string>("EndDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("endDate");

                    b.Property<string>("Location")
                        .HasColumnType("TEXT")
                        .HasColumnName("location");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("notes");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.ToTable("events", (string)null);
                });

            modelBuilder.Entity("Genealogy.Domain.Data.Entities.EventMember", b =>
                {
                    b.Property<Guid>("EventId")
                        .HasColumnType("TEXT")
                        .HasColumnName("eventId");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("TEXT")
                        .HasColumnName("entityId");

                    b.Property<string>("Date")
                        .HasColumnType("TEXT")
                        .HasColumnName("date");

                    b.Property<string>("EndDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("endDate");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER")
                        .HasColumnName("type");

                    b.HasKey("EventId", "EntityId");

                    b.ToTable("event_members", (string)null);
                });

            modelBuilder.Entity("Genealogy.Domain.Data.Entities.FamilyEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("notes");

                    b.HasKey("Id");

                    b.ToTable("families", (string)null);
                });

            modelBuilder.Entity("Genealogy.Domain.Data.Entities.FamilyMember", b =>
                {
                    b.Property<Guid>("FamilyId")
                        .HasColumnType("TEXT")
                        .HasColumnName("familyId");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("TEXT")
                        .HasColumnName("personId");

                    b.Property<int>("MemberType")
                        .HasColumnType("INTEGER")
                        .HasColumnName("memberType");

                    b.HasKey("FamilyId", "PersonId");

                    b.ToTable("family_members", (string)null);
                });

            modelBuilder.Entity("Genealogy.Domain.Data.Entities.MediaEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("FileCrc")
                        .HasColumnType("TEXT")
                        .HasColumnName("fileCrc");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT")
                        .HasColumnName("notes");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("path");

                    b.Property<long?>("Size")
                        .HasColumnType("INTEGER")
                        .HasColumnName("size");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT")
                        .HasColumnName("title");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.ToTable("media", (string)null);
                });

            modelBuilder.Entity("Genealogy.Domain.Data.Entities.MediaMeta", b =>
                {
                    b.Property<Guid>("MediaId")
                        .HasColumnType("TEXT")
                        .HasColumnName("media_id");

                    b.Property<string>("Key")
                        .HasColumnType("TEXT")
                        .HasColumnName("key");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("value");

                    b.HasKey("MediaId", "Key");

                    b.ToTable("media_meta", (string)null);
                });

            modelBuilder.Entity("Genealogy.Domain.Data.Entities.MediaReference", b =>
                {
                    b.Property<Guid>("EntityId")
                        .HasColumnType("TEXT")
                        .HasColumnName("entityId");

                    b.Property<Guid>("MediaId")
                        .HasColumnType("TEXT")
                        .HasColumnName("mediaId");

                    b.HasKey("EntityId", "MediaId");

                    b.ToTable("media_reference", (string)null);
                });

            modelBuilder.Entity("Genealogy.Domain.Data.Entities.PersonEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("notes");

                    b.Property<string>("Profession")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("profession");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("sex");

                    b.HasKey("Id");

                    b.ToTable("persons", (string)null);
                });

            modelBuilder.Entity("Genealogy.Domain.Data.Entities.SourceEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("notes");

                    b.Property<string>("Page")
                        .HasColumnType("TEXT")
                        .HasColumnName("page");

                    b.Property<string>("ReferenceId")
                        .HasColumnType("TEXT")
                        .HasColumnName("referenceId");

                    b.Property<string>("Repository")
                        .HasColumnType("TEXT")
                        .HasColumnName("repository");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER")
                        .HasColumnName("type");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT")
                        .HasColumnName("url");

                    b.Property<string>("Volume")
                        .HasColumnType("TEXT")
                        .HasColumnName("volume");

                    b.HasKey("Id");

                    b.ToTable("sources", (string)null);
                });

            modelBuilder.Entity("Genealogy.Infrastructure.Data.Configurations.EventConfiguration+EventSources", b =>
                {
                    b.Property<Guid>("EventId")
                        .HasColumnType("TEXT")
                        .HasColumnName("eventId");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("TEXT")
                        .HasColumnName("sourceId");

                    b.HasKey("EventId", "SourceId");

                    b.HasIndex("SourceId");

                    b.ToTable("event_sources", (string)null);
                });

            modelBuilder.Entity("Genealogy.Domain.Data.Entities.MediaMeta", b =>
                {
                    b.HasOne("Genealogy.Domain.Data.Entities.MediaEntity", null)
                        .WithMany("Meta")
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Genealogy.Infrastructure.Data.Configurations.EventConfiguration+EventSources", b =>
                {
                    b.HasOne("Genealogy.Domain.Data.Entities.EventEntity", "Events")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Genealogy.Domain.Data.Entities.SourceEntity", "Sources")
                        .WithMany()
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Events");

                    b.Navigation("Sources");
                });

            modelBuilder.Entity("Genealogy.Domain.Data.Entities.MediaEntity", b =>
                {
                    b.Navigation("Meta");
                });
#pragma warning restore 612, 618
        }
    }
}
