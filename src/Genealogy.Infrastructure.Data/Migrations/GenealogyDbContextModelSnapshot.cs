// <auto-generated />
using System;
using Genealogy.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Genealogy.Infrastructure.Migrations
{
    [DbContext(typeof(GenealogyDbContext))]
    partial class GenealogyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("EventSources", b =>
                {
                    b.Property<Guid>("EventId")
                        .HasColumnType("TEXT")
                        .HasColumnName("eventId");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("TEXT")
                        .HasColumnName("sourceId");

                    b.HasKey("EventId", "SourceId");

                    b.HasIndex("SourceId");

                    b.ToTable("event_sources", (string)null);
                });

            modelBuilder.Entity("Genealogy.Domain.Entities.Auth.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.HasKey("Id");

                    b.ToTable("auth_roles", (string)null);
                });

            modelBuilder.Entity("Genealogy.Domain.Entities.Auth.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT")
                        .HasColumnName("password_hash");

                    b.Property<string>("PasswordSalt")
                        .HasColumnType("TEXT")
                        .HasColumnName("password_salt");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.ToTable("auth_users", (string)null);
                });

            modelBuilder.Entity("Genealogy.Domain.Entities.EventEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("Date")
                        .HasColumnType("TEXT")
                        .HasColumnName("date");

                    b.Property<string>("EndDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("endDate");

                    b.Property<string>("Location")
                        .HasColumnType("TEXT")
                        .HasColumnName("location");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("notes");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.ToTable("events", (string)null);
                });

            modelBuilder.Entity("Genealogy.Domain.Entities.EventMember", b =>
                {
                    b.Property<Guid>("EventId")
                        .HasColumnType("TEXT")
                        .HasColumnName("eventId");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("TEXT")
                        .HasColumnName("entityId");

                    b.Property<string>("Date")
                        .HasColumnType("TEXT")
                        .HasColumnName("date");

                    b.Property<string>("EndDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("endDate");

                    b.Property<int>("EventType")
                        .HasColumnType("INTEGER")
                        .HasColumnName("type");

                    b.HasKey("EventId", "EntityId");

                    b.ToTable("event_members", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Genealogy.Domain.Entities.FamilyEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("notes");

                    b.HasKey("Id");

                    b.ToTable("families", (string)null);
                });

            modelBuilder.Entity("Genealogy.Domain.Entities.FamilyMember", b =>
                {
                    b.Property<Guid>("FamilyId")
                        .HasColumnType("TEXT")
                        .HasColumnName("familyId");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("TEXT")
                        .HasColumnName("personId");

                    b.Property<int>("MemberType")
                        .HasColumnType("INTEGER")
                        .HasColumnName("memberType");

                    b.HasKey("FamilyId", "PersonId");

                    b.HasIndex("PersonId");

                    b.HasIndex("FamilyId", "MemberType")
                        .IsUnique()
                        .HasDatabaseName("IX_UniqueParentPerFamily")
                        .HasFilter("memberType IN (1,2)");

                    b.ToTable("family_members", (string)null);

                    b.HasDiscriminator<int>("MemberType");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Genealogy.Domain.Entities.MediaEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("FileCrc")
                        .HasColumnType("TEXT")
                        .HasColumnName("fileCrc");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT")
                        .HasColumnName("notes");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("path");

                    b.Property<long?>("Size")
                        .HasColumnType("INTEGER")
                        .HasColumnName("size");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT")
                        .HasColumnName("title");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.ToTable("media", (string)null);
                });

            modelBuilder.Entity("Genealogy.Domain.Entities.PersonEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name")
                        .UseCollation("NOCASE");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("notes");

                    b.Property<string>("Profession")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("profession");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("sex");

                    b.HasKey("Id");

                    b.ToTable("persons", (string)null);
                });

            modelBuilder.Entity("Genealogy.Domain.Entities.SourceEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("notes");

                    b.Property<string>("Page")
                        .HasColumnType("TEXT")
                        .HasColumnName("page");

                    b.Property<string>("ReferenceId")
                        .HasColumnType("TEXT")
                        .HasColumnName("referenceId");

                    b.Property<string>("Repository")
                        .HasColumnType("TEXT")
                        .HasColumnName("repository");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER")
                        .HasColumnName("type");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT")
                        .HasColumnName("url");

                    b.Property<string>("Volume")
                        .HasColumnType("TEXT")
                        .HasColumnName("volume");

                    b.HasKey("Id");

                    b.ToTable("sources", (string)null);
                });

            modelBuilder.Entity("Genealogy.Infrastructure.Data.Configurations.Auth.RoleConfiguration+RoleMember", b =>
                {
                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT")
                        .HasColumnName("role_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT")
                        .HasColumnName("user_id");

                    b.HasKey("RoleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("auth_role_members", (string)null);
                });

            modelBuilder.Entity("PersonMedia", b =>
                {
                    b.Property<Guid>("PersonId")
                        .HasColumnType("TEXT")
                        .HasColumnName("personId");

                    b.Property<Guid>("MediaId")
                        .HasColumnType("TEXT")
                        .HasColumnName("mediaId");

                    b.HasKey("PersonId", "MediaId");

                    b.HasIndex("MediaId");

                    b.ToTable("person_media", (string)null);
                });

            modelBuilder.Entity("SourceMedia", b =>
                {
                    b.Property<Guid>("SourceId")
                        .HasColumnType("TEXT")
                        .HasColumnName("sourceId");

                    b.Property<Guid>("MediaId")
                        .HasColumnType("TEXT")
                        .HasColumnName("mediaId");

                    b.HasKey("SourceId", "MediaId");

                    b.HasIndex("MediaId");

                    b.ToTable("source_media", (string)null);
                });

            modelBuilder.Entity("Genealogy.Domain.Entities.FamilyEventMember", b =>
                {
                    b.HasBaseType("Genealogy.Domain.Entities.EventMember");

                    b.HasIndex("EntityId");

                    b.ToTable("event_members_family", (string)null);
                });

            modelBuilder.Entity("Genealogy.Domain.Entities.PersonEventMember", b =>
                {
                    b.HasBaseType("Genealogy.Domain.Entities.EventMember");

                    b.HasIndex("EntityId");

                    b.ToTable("event_members_person", (string)null);
                });

            modelBuilder.Entity("Genealogy.Domain.Entities.FamilyChildMember", b =>
                {
                    b.HasBaseType("Genealogy.Domain.Entities.FamilyMember");

                    b.HasDiscriminator().HasValue(3);
                });

            modelBuilder.Entity("Genealogy.Domain.Entities.FamilyFosterChildMember", b =>
                {
                    b.HasBaseType("Genealogy.Domain.Entities.FamilyMember");

                    b.HasDiscriminator().HasValue(4);
                });

            modelBuilder.Entity("Genealogy.Domain.Entities.FamilyHusbandMember", b =>
                {
                    b.HasBaseType("Genealogy.Domain.Entities.FamilyMember");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("Genealogy.Domain.Entities.FamilyWifeMember", b =>
                {
                    b.HasBaseType("Genealogy.Domain.Entities.FamilyMember");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("EventSources", b =>
                {
                    b.HasOne("Genealogy.Domain.Entities.EventEntity", null)
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Genealogy.Domain.Entities.SourceEntity", null)
                        .WithMany()
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Genealogy.Domain.Entities.EventMember", b =>
                {
                    b.HasOne("Genealogy.Domain.Entities.EventEntity", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Genealogy.Domain.Entities.FamilyMember", b =>
                {
                    b.HasOne("Genealogy.Domain.Entities.FamilyEntity", "Family")
                        .WithMany("FamilyMembers")
                        .HasForeignKey("FamilyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Genealogy.Domain.Entities.PersonEntity", "Person")
                        .WithMany("Families")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Family");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Genealogy.Domain.Entities.MediaEntity", b =>
                {
                    b.OwnsMany("Genealogy.Domain.Entities.MediaMeta", "Meta", b1 =>
                        {
                            b1.Property<Guid>("MediaId")
                                .HasColumnType("TEXT")
                                .HasColumnName("media_id");

                            b1.Property<string>("Key")
                                .HasColumnType("TEXT")
                                .HasColumnName("key");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("value");

                            b1.HasKey("MediaId", "Key");

                            b1.ToTable("media_meta", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("MediaId");
                        });

                    b.Navigation("Meta");
                });

            modelBuilder.Entity("Genealogy.Infrastructure.Data.Configurations.Auth.RoleConfiguration+RoleMember", b =>
                {
                    b.HasOne("Genealogy.Domain.Entities.Auth.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Genealogy.Domain.Entities.Auth.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PersonMedia", b =>
                {
                    b.HasOne("Genealogy.Domain.Entities.MediaEntity", "Media")
                        .WithMany()
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Genealogy.Domain.Entities.PersonEntity", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Media");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("SourceMedia", b =>
                {
                    b.HasOne("Genealogy.Domain.Entities.MediaEntity", null)
                        .WithMany()
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Genealogy.Domain.Entities.SourceEntity", null)
                        .WithMany()
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Genealogy.Domain.Entities.FamilyEventMember", b =>
                {
                    b.HasOne("Genealogy.Domain.Entities.FamilyEntity", null)
                        .WithMany("Events")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Genealogy.Domain.Entities.EventMember", null)
                        .WithOne()
                        .HasForeignKey("Genealogy.Domain.Entities.FamilyEventMember", "EventId", "EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Genealogy.Domain.Entities.PersonEventMember", b =>
                {
                    b.HasOne("Genealogy.Domain.Entities.PersonEntity", null)
                        .WithMany("Events")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Genealogy.Domain.Entities.EventMember", null)
                        .WithOne()
                        .HasForeignKey("Genealogy.Domain.Entities.PersonEventMember", "EventId", "EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Genealogy.Domain.Entities.FamilyEntity", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("FamilyMembers");
                });

            modelBuilder.Entity("Genealogy.Domain.Entities.PersonEntity", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("Families");
                });
#pragma warning restore 612, 618
        }
    }
}
